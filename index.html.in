define(TITLE,ggcov Features)dnl
include(_common.m4)dnl
BEGINHEAD
<meta name="keywords" content="ggcov, coverage, gcov, test coverage, line coverage, branch coverage, call coverage">
include(_styles.html)
ENDHEAD
BEGINBODY

<h2>What is gcov?</h2>

<p>
<span class="program">Ggcov</span> is a GTK+ GUI for exploring test coverage
data produced by C and C++ programs compiled with
<a href="http://www.gnu.org/software/gcc/gcc.html">gcc</a>
<a href="http://gcc.gnu.org/onlinedocs/gcc-3.0/gcc_3.html#IDX233">-fprofile-arcs</a>
<a href="http://gcc.gnu.org/onlinedocs/gcc-3.0/gcc_3.html#IDX234">-ftest-coverage</a>.
So it's basically a GUI replacement for the
<a href="http://gcc.gnu.org/onlinedocs/gcc-3.0/gcc_8.html#SEC132">gcov</a>
program that comes with <span class="program">gcc</span>.
</p>

<p>
<span class="program">Ggcov</span> is released under the
<a href="http://www.gnu.org/">GNU</a> General Public License (GPL) version 2
with <b>no warranty</b>.  See the file COPYING in the distribution or
<a href="http://www.gnu.org/licenses/gpl.html">here</a>
</p>


<h2>Call Graph Analysis</h2>

<p>
Apart from presenting graphically and interactively the same information
as <span class="program">gcov</span>, <span class="program">ggcov</span>
has one extra feature: <em>call graph analysis</em>.
<span class="program">Ggcov</span> calculates a call graph of all
function calls known at compile time (i.e. excluding calls
made through function pointers or C++ virtual function tables) and
applies coverage data to this call graph.  The result is that you can
see how many times a function was called from various other functions.
</p>

<p>
The downside of call graph analysis is that <span class="program">ggcov</span>
needs to read and pick apart object files to get the call data.  The
code exists and works for i386 platforms with ELF format executables
only.
</p>

<p>
<span class="program">Ggcov</span> is in a very early stage of development, but is already
somewhat useful.  It is known to work on i386/Linux; other platforms
should work except that the call graph feature will not work..
</p>

<h2>Requirements</h2>

<p>
<span class="program">Ggcov</span> requires the following, which
should be available on any modern Linux distro or commercial Unix:
</p>
<ul>
  <li><i>libglade</i> library with GNOME support
  <li>GNOME <i>libgnomeui</i> library
  <li>GNOME <i>gtk+</i> library
</ul>

<h2>Compatibility Matrix</h2>

<table border="0" cellspacing="0" cellpadding="5">

  <tr valign="bottom">
    <td><b>Operating System</b></td>
    <td><b>ggcov version</b></td>
    <td><b>Notes</b></td>
  </tr>

  <tr valign="top" class="hilite">
    <td>Red Hat Linux 7.3 (Valhalla), on i386</td>
    <td>0.2</td>
    <td>
    I build and test on this platform and supply binary RPMS for it.
    Mostly works, but call coverage data is wrong due to broken data
    files written by gcc 2.96 (gcov also mispreports calls).
    </td>
  </tr>

  <tr valign="top">
    <td>Red Hat Linux 9 (Shrike), on i386</td>
    <td>0.2</td>
    <td>
    I build and test on this platform and supply binary RPMS for it.
    Gcc 3.2.2 package is known to create good data files.
    </td>
  </tr>

  <tr valign="top" class="hilite">
    <td>SuSE Linux 8.2, on i386</td>
    <td>0.1.6</td>
    <td>
    SuSE provide a gcc which claims to be version 3.2 but contains
    early 3.3 features, in particular it writes completely different
    new .bbg and .da file formats.
    <span style="color:red"><b>DO NOT USE</b></span>
    <span class="program">version 0.1.5</span> on SuSE 8.2, the new file `format'
    causes it to eat all your RAM and crash on startup.  Try version 0.1.6.
    </td>
  </tr>

  <tr valign="top">
    <td>SGI Irix 6.5.20</td>
    <td>0.1.3</td>
    <td>
    Compiles and runs.  Only tested in n32 ABI.  Code to read call graph
    data from MIPS object files has not been written, and won't be for
    a while because the bfd library is missing from the Irix freeware
    gcc package.
    </td>
  </tr>

</table>


<p>
If you port <span class="program">ggcov</span> to a new platform, please
EMAILME(mail me) the patches (unified diff `format' preferred). I will
try to incorporate them into the next release.
</p>

<h2>Credits</h2>

<p>
The primary developer is EMAILME(Greg Banks).
Thanks to the following people who have contributed to
<span class="program">ggcov</span>.
</p>

include(_thanks.m4)
BEGINTHANKS
THANKS(Havoc Pennington,GTK2 port)
THANKS(`(Ani)ruddha Mulay',useful ideas)
THANKS(`Zach Frey',bug report)
THANKS(`Alan Stein',bug report)
THANKS(`Jim Bowring',bug report)
THANKS(`Walter Harms',bug report)
THANKS(`Stephan Hegel',bug report)
ENDTHANKS

ENDBODY
